// pptx2dot.go
// sample code for bunji2/graph.pptx

package main

import (
	"fmt"
	"os"
	gp "github.com/bunji2/graph.pptx"
)

func main() {
	if len(os.Args) < 2 {
		fmt.Printf("Usage: %s file.pptx\n", os.Args[0])
		return
	} 
	gp.Init() // 忘れずに…
	if err := gp.Parse(os.Args[1]); err == nil {
		//gp.Dump()
		dot_header("G")
		gp.DoWithNodes(func(nid string, node gp.Node) bool {
			return dot_node(nid, node.Label)
		})
		gp.DoWithEdges(func(eid string, edge gp.Edge) bool {
			return dot_edge(edge.Src, edge.Dst)
		})
		dot_footer()
	}
}

func dot_header(graph_name string) {
	fmt.Printf("# DOT file generated by %s\n", os.Args[0])
	fmt.Printf("graph %s {\n", graph_name)
}

func dot_node(nid, label string) bool {
	fmt.Printf("  %s [label = \"%s\"];\n", nid, label)
	return true
}

/*
// 上の場合はノードはすべて楕円になるはず。
// DOT 用の shape を指定できる場合はこんな感じ…
func dot_node(nid, label, shape string) bool {
	fmt.Printf("  %s [label = \"%s\" shape = \"%s\"];\n", nid, label, shape)
	return true
}
*/

func dot_edge(src_id, dst_id string) bool {
	if src_id == "" || dst_id == "" {
		return true
	}
	fmt.Printf("  %s -- %s;\n", src_id, dst_id)
	return true
}

func dot_footer() {
	fmt.Printf("}\n")
}
